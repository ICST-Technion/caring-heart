// Mocks generated by Mockito 5.2.0 from annotations
// in nivapp/mock_definitions.dart.
// Do not manually edit this file.

import 'dart:async' as _i5;

import 'package:mockito/mockito.dart' as _i1;
import 'package:nivapp/item_spec.dart' as _i2;
import 'package:nivapp/mock_definitions.dart' as _i12;
import 'package:nivapp/pickup_point.dart' as _i8;
import 'package:nivapp/pickup_report.dart' as _i3;
import 'package:nivapp/route_planner/date_utility.dart' as _i11;
import 'package:nivapp/services/auth_service_i.dart' as _i9;
import 'package:nivapp/services/init_service.dart' as _i10;
import 'package:nivapp/services/inventory_service_i.dart' as _i4;
import 'package:nivapp/services/report_service_i.dart' as _i6;
import 'package:nivapp/services/routes_service_i.dart' as _i7;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

class _FakeDateTime_0 extends _i1.Fake implements DateTime {}

class _FakeItem_1 extends _i1.Fake implements _i2.Item {}

class _FakePickupReport_2 extends _i1.Fake implements _i3.PickupReport {}

/// A class which mocks [Item].
///
/// See the documentation for Mockito's code generation for more information.
class MockItem extends _i1.Mock implements _i2.Item {
  MockItem() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String get address =>
      (super.noSuchMethod(Invocation.getter(#address), returnValue: '')
          as String);
  @override
  String get floor =>
      (super.noSuchMethod(Invocation.getter(#floor), returnValue: '')
          as String);
  @override
  String get apartment =>
      (super.noSuchMethod(Invocation.getter(#apartment), returnValue: '')
          as String);
  @override
  String get neighborhood =>
      (super.noSuchMethod(Invocation.getter(#neighborhood), returnValue: '')
          as String);
  @override
  String get city =>
      (super.noSuchMethod(Invocation.getter(#city), returnValue: '') as String);
  @override
  String get comments =>
      (super.noSuchMethod(Invocation.getter(#comments), returnValue: '')
          as String);
  @override
  DateTime get date => (super.noSuchMethod(Invocation.getter(#date),
      returnValue: _FakeDateTime_0()) as DateTime);
  @override
  String get description =>
      (super.noSuchMethod(Invocation.getter(#description), returnValue: '')
          as String);
  @override
  String get email =>
      (super.noSuchMethod(Invocation.getter(#email), returnValue: '')
          as String);
  @override
  bool get isChecked =>
      (super.noSuchMethod(Invocation.getter(#isChecked), returnValue: false)
          as bool);
  @override
  bool get isCollected =>
      (super.noSuchMethod(Invocation.getter(#isCollected), returnValue: false)
          as bool);
  @override
  String get name =>
      (super.noSuchMethod(Invocation.getter(#name), returnValue: '') as String);
  @override
  String get id =>
      (super.noSuchMethod(Invocation.getter(#id), returnValue: '') as String);
  @override
  String get phone =>
      (super.noSuchMethod(Invocation.getter(#phone), returnValue: '')
          as String);
  @override
  String get fullAddress =>
      (super.noSuchMethod(Invocation.getter(#fullAddress), returnValue: '')
          as String);
  @override
  _i2.Item copyWith(
          {String? address,
          String? floor,
          String? apartment,
          String? neighborhood,
          String? city,
          String? comments,
          DateTime? date,
          String? description,
          String? email,
          bool? isChecked,
          bool? isCollected,
          String? name,
          String? id,
          String? phone}) =>
      (super.noSuchMethod(
          Invocation.method(#copyWith, [], {
            #address: address,
            #floor: floor,
            #apartment: apartment,
            #neighborhood: neighborhood,
            #city: city,
            #comments: comments,
            #date: date,
            #description: description,
            #email: email,
            #isChecked: isChecked,
            #isCollected: isCollected,
            #name: name,
            #id: id,
            #phone: phone
          }),
          returnValue: _FakeItem_1()) as _i2.Item);
  @override
  Map<String, dynamic> toMap() =>
      (super.noSuchMethod(Invocation.method(#toMap, []),
          returnValue: <String, dynamic>{}) as Map<String, dynamic>);
  @override
  String toJson() =>
      (super.noSuchMethod(Invocation.method(#toJson, []), returnValue: '')
          as String);
}

/// A class which mocks [InventoryServiceI].
///
/// See the documentation for Mockito's code generation for more information.
class MockInventoryServiceI extends _i1.Mock implements _i4.InventoryServiceI {
  MockInventoryServiceI() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<_i2.Item> getItemByID(String? id) =>
      (super.noSuchMethod(Invocation.method(#getItemByID, [id]),
              returnValue: Future<_i2.Item>.value(_FakeItem_1()))
          as _i5.Future<_i2.Item>);
  @override
  _i5.Future<void> collectItem(dynamic id) =>
      (super.noSuchMethod(Invocation.method(#collectItem, [id]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i5.Future<void>);
  @override
  _i5.Future<List<_i2.Item>> getCheckedItems() =>
      (super.noSuchMethod(Invocation.method(#getCheckedItems, []),
              returnValue: Future<List<_i2.Item>>.value(<_i2.Item>[]))
          as _i5.Future<List<_i2.Item>>);
}

/// A class which mocks [ReportServiceI].
///
/// See the documentation for Mockito's code generation for more information.
class MockReportServiceI extends _i1.Mock implements _i6.ReportServiceI {
  MockReportServiceI() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<void> setReport(_i3.PickupReport? report) =>
      (super.noSuchMethod(Invocation.method(#setReport, [report]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i5.Future<void>);
  @override
  _i5.Future<_i3.PickupReport> getReport(String? itemID) => (super.noSuchMethod(
          Invocation.method(#getReport, [itemID]),
          returnValue: Future<_i3.PickupReport>.value(_FakePickupReport_2()))
      as _i5.Future<_i3.PickupReport>);
}

/// A class which mocks [RoutesServiceI].
///
/// See the documentation for Mockito's code generation for more information.
class MockRoutesServiceI extends _i1.Mock implements _i7.RoutesServiceI {
  MockRoutesServiceI() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<List<_i8.PickupPoint>> getItems(
          {DateTime Function()? getDay = _i7.today}) =>
      (super.noSuchMethod(Invocation.method(#getItems, [], {#getDay: getDay}),
              returnValue:
                  Future<List<_i8.PickupPoint>>.value(<_i8.PickupPoint>[]))
          as _i5.Future<List<_i8.PickupPoint>>);
  @override
  _i5.Future<void> addRouteByItemList(
          List<_i8.PickupPoint>? list, DateTime? date) =>
      (super.noSuchMethod(Invocation.method(#addRouteByItemList, [list, date]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i5.Future<void>);
  @override
  _i5.Future<void> replaceRoute(
          List<_i8.PickupPoint>? prevRoute,
          List<_i8.PickupPoint>? newRoute,
          DateTime? prevDate,
          DateTime? newDate) =>
      (super.noSuchMethod(
          Invocation.method(
              #replaceRoute, [prevRoute, newRoute, prevDate, newDate]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i5.Future<void>);
  @override
  _i5.Future<List<_i8.PickupPoint>> getWeeklyItems(
          {DateTime Function()? getCurrentDay = _i7.today}) =>
      (super.noSuchMethod(
              Invocation.method(
                  #getWeeklyItems, [], {#getCurrentDay: getCurrentDay}),
              returnValue:
                  Future<List<_i8.PickupPoint>>.value(<_i8.PickupPoint>[]))
          as _i5.Future<List<_i8.PickupPoint>>);
  @override
  _i5.Future<List<_i8.PickupPoint>> getAllPickupPoints() => (super.noSuchMethod(
          Invocation.method(#getAllPickupPoints, []),
          returnValue: Future<List<_i8.PickupPoint>>.value(<_i8.PickupPoint>[]))
      as _i5.Future<List<_i8.PickupPoint>>);
}

/// A class which mocks [AuthServiceI].
///
/// See the documentation for Mockito's code generation for more information.
class MockAuthServiceI extends _i1.Mock implements _i9.AuthServiceI {
  MockAuthServiceI() {
    _i1.throwOnMissingStub(this);
  }

  @override
  set name(String? _name) => super.noSuchMethod(Invocation.setter(#name, _name),
      returnValueForMissingStub: null);
  @override
  set uid(String? _uid) => super.noSuchMethod(Invocation.setter(#uid, _uid),
      returnValueForMissingStub: null);
  @override
  set userEmail(String? _userEmail) =>
      super.noSuchMethod(Invocation.setter(#userEmail, _userEmail),
          returnValueForMissingStub: null);
  @override
  _i5.Future<bool> isUserRemembered() =>
      (super.noSuchMethod(Invocation.method(#isUserRemembered, []),
          returnValue: Future<bool>.value(false)) as _i5.Future<bool>);
  @override
  _i5.Future<String?> signInWithEmailPassword(
          String? email, String? password) =>
      (super.noSuchMethod(
          Invocation.method(#signInWithEmailPassword, [email, password]),
          returnValue: Future<String?>.value()) as _i5.Future<String?>);
  @override
  _i5.Future<String> signOut() =>
      (super.noSuchMethod(Invocation.method(#signOut, []),
          returnValue: Future<String>.value('')) as _i5.Future<String>);
}

/// A class which mocks [InitService].
///
/// See the documentation for Mockito's code generation for more information.
class MockInitService extends _i1.Mock implements _i10.InitService {
  MockInitService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<void> init() => (super.noSuchMethod(Invocation.method(#init, []),
      returnValue: Future<void>.value(),
      returnValueForMissingStub: Future<void>.value()) as _i5.Future<void>);
}

/// A class which mocks [PickupPoint].
///
/// See the documentation for Mockito's code generation for more information.
class MockPickupPoint extends _i1.Mock implements _i8.PickupPoint {
  MockPickupPoint() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.Item get item =>
      (super.noSuchMethod(Invocation.getter(#item), returnValue: _FakeItem_1())
          as _i2.Item);
  @override
  set pickupTime(_i11.MyDateTimeRange? _pickupTime) =>
      super.noSuchMethod(Invocation.setter(#pickupTime, _pickupTime),
          returnValueForMissingStub: null);
}

/// A class which mocks [MyFunction].
///
/// See the documentation for Mockito's code generation for more information.
class MockMyFunction extends _i1.Mock implements _i12.MyFunction {
  MockMyFunction() {
    _i1.throwOnMissingStub(this);
  }

  @override
  void call() => super.noSuchMethod(Invocation.method(#call, []),
      returnValueForMissingStub: null);
}
